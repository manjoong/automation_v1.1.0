# 8. 추가 디스크 확인하기 
- name: '8-1. Setting master parted, filesystem, mount to icp nodes (master)'
  hosts: 'master'
  gather_facts: true
  remote_user: '{% for name, item in node.items() %}{% for value in item %}{% if inventory_hostname == value.name %}{{ value.user_id }}{% endif %}{% endfor %}{% endfor %}'
  vars_files:
    - ../../automation_config.yaml

  vars:
    ansible_become: true
    ansible_user: '{% for name, item in node.items() %}{% for value in item %}{% if inventory_hostname == value.name %}{{ value.user_id }}{% endif %}{% endfor %}{% endfor %}'
    #pem key를 사용하는 경우
    ansible_ssh_private_key_file: '{{ util.pemkey }}'
    #password를 사용하는 경우
    ansible_ssh_pass: '{% for name, item in node.items() %}{% for value in item %}{% if inventory_hostname == value.name %}{{ value.user_pwd }}{% endif %}{% endfor %}{% endfor %}'
    ansible_become_pass: "{{ ansible_ssh_pass }}"
    ansible_ssh_common_args: "-oPubkeyAuthentication=no"

  tasks:
    - name: '8-1-1. Set parted (master)'
      parted:
        device: '{{ util.disk_path }}'
        number: '{{ item.number }}'
        state: present
        label: 'gpt'
        part_start: '{{ item.part_start }}'
        part_end: '{{ item.part_end }}'
        part_type: '{{ item.part_type }}'
      with_items:
        - { number: 1, part_start: '0%', part_end: '100GB', part_type: 'primary'}
        - { number: 2, part_start: '100GB', part_end: '130GB', part_type: 'primary'}
        - { number: 3, part_start: '130GB', part_end: '180GB', part_type: 'primary'}
        - { number: 4, part_start: '180GB', part_end: '190GB', part_type: 'primary'}
        - { number: 5, part_start: '190GB', part_end: '300GB', part_type: 'primary'}          
      when: util.disk_path != false
 
    - name: '8-1-2. Set filesystem (master)'
      filesystem:
        fstype: xfs
        dev: '{{ item.dev }}'
      with_items:
        - { dev: '{{ util.disk_path }}1'}    
        - { dev: '{{ util.disk_path }}2'}                        
        - { dev: '{{ util.disk_path }}3'}
        - { dev: '{{ util.disk_path }}4'}                        
        - { dev: '{{ util.disk_path }}5'}      
      when: util.disk_path != false

    - name: '8-1-3. Set Mount (master)'
      mount:
        path: '{{ item.path }}'
        src: '{{ item.src }}'
        fstype: xfs
        state: mounted
      with_items:
        - { path: '/var/lib/docker', src: '{{ util.disk_path }}1'}    
        - { path: '/var/lib/kubelet', src: '{{ util.disk_path }}2'}  
        - { path: '/var/lib/icp', src: '{{ util.disk_path }}3'}          
        - { path: '/var/lib/etcd', src: '{{ util.disk_path }}4'}  
        - { path: '/var/lib/mysql', src: '{{ util.disk_path }}5'}  
      when: util.disk_path != false

- name: '8-2. Setting master parted, filesystem, mount to icp nodes (mgmt, va)'
  hosts: 'mgmt'
  gather_facts: true
  remote_user: '{% for name, item in node.items() %}{% for value in item %}{% if inventory_hostname == value.name %}{{ value.user_id }}{% endif %}{% endfor %}{% endfor %}'
  vars_files:
  - ../../automation_config.yaml

  vars:
    ansible_become: true
    ansible_user: '{% for name, item in node.items() %}{% for value in item %}{% if inventory_hostname == value.name %}{{ value.user_id }}{% endif %}{% endfor %}{% endfor %}'
    #pem key를 사용하는 경우
    ansible_ssh_private_key_file: '{{ util.pemkey }}'
    #password를 사용하는 경우
    ansible_ssh_pass: '{% for name, item in node.items() %}{% for value in item %}{% if inventory_hostname == value.name %}{{ value.user_pwd }}{% endif %}{% endfor %}{% endfor %}'
    ansible_become_pass: "{{ ansible_ssh_pass }}"
    ansible_ssh_common_args: "-oPubkeyAuthentication=no"
 
  tasks:
    - name: '8-2-1. Set parted'
      parted:
        device: '{{ util.disk_path }}'
        number: '{{ item.number }}'
        state: present
        label: 'gpt'
        part_start: '{{ item.part_start }}'
        part_end: '{{ item.part_end }}'
        part_type: '{{ item.part_type }}'
      with_items:
        - { number: 1, part_start: '0%', part_end: '100GB', part_type: 'primary'}
        - { number: 2, part_start: '100GB', part_end: '200GB', part_type: 'primary'}
        - { number: 3, part_start: '200GB', part_end: '300GB', part_type: 'primary'}        
      when: util.disk_path != false
 
    - name: '8-2-2. Set filesystem'
      filesystem:
        fstype: xfs
        dev: '{{ item.dev }}'
      with_items:
        - { dev: '{{ util.disk_path }}1'}    
        - { dev: '{{ util.disk_path }}2'}                        
        - { dev: '{{ util.disk_path }}3'}    
      when: util.disk_path != false
 
    - name: '8-2-3. Set Mount'
      mount:
        path: '{{ item.path }}'
        src: '{{ item.src }}'
        fstype: xfs
        state: mounted
      with_items:
        - { path: '/var/lib/docker', src: '{{ util.disk_path }}1'}    
        - { path: '/var/lib/icp', src: '{{ util.disk_path }}2'}  
        - { path: '/var/lib/kubelet', src: '{{ util.disk_path }}3'}             
      when: util.disk_path != false

- name: '8-3. Setting parted, filesystem, mount to icp nodes (proxy, worker)'
  hosts: 'proxy, worker'
  gather_facts: true
  remote_user: '{% for name, item in node.items() %}{% for value in item %}{% if inventory_hostname == value.name %}{{ value.user_id }}{% endif %}{% endfor %}{% endfor %}'
  vars_files:
  - ../../automation_config.yaml

  vars:
    ansible_become: true
    ansible_user: '{% for name, item in node.items() %}{% for value in item %}{% if inventory_hostname == value.name %}{{ value.user_id }}{% endif %}{% endfor %}{% endfor %}'
    #pem key를 사용하는 경우
    ansible_ssh_private_key_file: '{{ util.pemkey }}'
    #password를 사용하는 경우
    ansible_ssh_pass: '{% for name, item in node.items() %}{% for value in item %}{% if inventory_hostname == value.name %}{{ value.user_pwd }}{% endif %}{% endfor %}{% endfor %}'
    ansible_become_pass: "{{ ansible_ssh_pass }}"
    ansible_ssh_common_args: "-oPubkeyAuthentication=no"
 
  tasks:
    - name: '8-3-1. Set parted'
      parted:
        device: '{{ util.disk_path }}'
        number: '{{ item.number }}'
        state: present
        label: 'gpt'
        part_start: '{{ item.part_start }}'
        part_end: '{{ item.part_end }}'
        part_type: '{{ item.part_type }}'
      with_items:
        - { number: 1, part_start: '0%', part_end: '100GB', part_type: 'primary'}
        - { number: 2, part_start: '100GB', part_end: '150GB', part_type: 'primary'}   
      when: util.disk_path != false
 
    - name: '8-3-2. Set filesystem'
      filesystem:
        fstype: xfs
        dev: '{{ item.dev }}'
      with_items:
        - { dev: '{{ util.disk_path }}1'}    
        - { dev: '{{ util.disk_path }}2'}                          
      when: util.disk_path != false
 
    - name: '8-3-3. Set Mount'
      mount:
        path: '{{ item.path }}'
        src: '{{ item.src }}'
        fstype: xfs
        state: mounted
      with_items:
        - { path: '/var/lib/docker', src: '{{ util.disk_path }}1'}    
        - { path: '/var/lib/kubelet', src: '{{ util.disk_path }}2'}            
      when: util.disk_path != false

- name: '8-4. Setting master parted, filesystem, mount to icp nodes (va)'
  hosts: 'va'
  gather_facts: true
  remote_user: '{% for name, item in node.items() %}{% for value in item %}{% if inventory_hostname == value.name %}{{ value.user_id }}{% endif %}{% endfor %}{% endfor %}'
  vars_files:
    - ../../automation_config.yaml
  vars:
    ansible_become: true
    ansible_user: '{% for name, item in node.items() %}{% for value in item %}{% if inventory_hostname == value.name %}{{ value.user_id }}{% endif %}{% endfor %}{% endfor %}'
    #pem key를 사용하는 경우
    ansible_ssh_private_key_file: '{{ util.pemkey }}'
    #password를 사용하는 경우
    ansible_ssh_pass: '{% for name, item in node.items() %}{% for value in item %}{% if inventory_hostname == value.name %}{{ value.user_pwd }}{% endif %}{% endfor %}{% endfor %}'
    ansible_become_pass: "{{ ansible_ssh_pass }}"
    ansible_ssh_common_args: "-oPubkeyAuthentication=no"

  tasks:
    - name: '8-4-1. Set parted (va)'
      parted:
        device: '{{ util.disk_path }}'
        number: '{{ item.number }}'
        state: present
        label: 'gpt'
        part_start: '{{ item.part_start }}'
        part_end: '{{ item.part_end }}'
        part_type: '{{ item.part_type }}'
      with_items:
        - { number: 1, part_start: '0%', part_end: '100GB', part_type: 'primary'}
        - { number: 2, part_start: '100GB', part_end: '200GB', part_type: 'primary'}
        - { number: 3, part_start: '200GB', part_end: '230GB', part_type: 'primary'}
        - { number: 4, part_start: '230GB', part_end: '240GB', part_type: 'primary'}        
      when: util.disk_path != false
 
    - name: '8-4-2. Set filesystem (va)'
      filesystem:
        fstype: xfs
        dev: '{{ item.dev }}'
      with_items:
        - { dev: '{{ util.disk_path }}1'}    
        - { dev: '{{ util.disk_path }}2'}                        
        - { dev: '{{ util.disk_path }}3'}
        - { dev: '{{ util.disk_path }}4'}                           
      when: util.disk_path != false

    - name: '8-4-3. Set Mount (va)'
      mount:
        path: '{{ item.path }}'
        src: '{{ item.src }}'
        fstype: xfs
        state: mounted
      with_items:
        - { path: '/var/lib/docker', src: '{{ util.disk_path }}1'}    
        - { path: '/var/lib/icp/va', src: '{{ util.disk_path }}2'}  
        - { path: '/var/lib/kubelet', src: '{{ util.disk_path }}3'}          
        - { path: '/var/log/cloudsight', src: '{{ util.disk_path }}4'}  
      when: util.disk_path != false
